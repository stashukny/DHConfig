@model DHConfig.DIM_FIELD

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>DIM_FIELD</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.CONFIG_COMMON_NAME, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.CONFIG_COMMON_NAME)
                @Html.HiddenFor(model => model.CONFIG_COMMON_NAME)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DIM_COMMON_NAME, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DisplayFor(model => model.DIM_COMMON_NAME)*@
                @Html.DropDownList("DIM_COMMON_NAME", null, htmlAttributes: new { @class = "form-control" })
                @Html.HiddenFor(model => model.DIM_COMMON_NAME)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DIM_FIELD_NAME, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DisplayFor(model => model.DIM_FIELD_NAME)*@
                @Html.EditorFor(model => model.DIM_FIELD_NAME, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.DIM_FIELD_NAME)
            </div>
        </div>


@section MyScripts{
        <script type="text/javascript">
            $(document).ready(function () {
                function updateClean() {
                    var raw = $("#DIM_FIELD_NAME").val();
                    var clean = raw + "_CLEAN";                                        
                    $("#DIM_FIELD_NAME_CLEAN").val(clean);
                }
                $(document).on("change, keyup", "#DIM_FIELD_NAME", updateClean);
            });

            //$.ajax({
            //    type: "POST",
            //    data: formData,
            //    url: "/DIM_FIELD/Edit",
            //    dataType: 'json',
            //    contentType: false,
            //    processData: false,
            //    success: function (response) {
            //        if (response != null && response.success) {
            //            alert(response);
            //        } else {
            //            alert(response);
            //        }
            //    },
            //    error: function (response) {
            //        alert("error!");  // 
            //    }

            //});

            //$.getJSON('ajax/test.json', function (data) {
            //    alert(JSON.stringify(data));
            //});

            @*$(function () {
                $.ajax({
                    url: '@Url.Action("Edit","DIM_FIELD")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        //Here you will get the data.
                        //Display this in your Modal popup
                    },
                    error: function (data) {
                        alert("error");
                    }
                });
            });*@
        </script>
        }




        <div class="form-group">
            @Html.LabelFor(model => model.DIM_FIELD_NAME_CLEAN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DIM_FIELD_NAME_CLEAN, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
                @*@Html.DisplayFor(model => model.DIM_FIELD_NAME_CLEAN)*@
                @Html.ValidationMessageFor(model => model.DIM_FIELD_NAME_CLEAN, "", new { @class = "text-danger" })
                @*<input class="form-control" type="text" id="DIM_FIELD_NAME_CLEAN" name="DIM_FIELD_NAME_CLEAN" readonly="readonly" value="" />*@
            </div>
        </div>



        @{
            var input = Html.TextBoxFor(m => m.DIM_FIELD_NAME).ToHtmlString();            
        }




            <div class="form-group">
                @Html.LabelFor(model => model.DIM_DATA_TYPE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DIM_DATA_TYPE, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DIM_DATA_TYPE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DIM_FIELD_FEATURE, htmlAttributes: new { @class = "control-label col-md-2" })
                @*<div class="col-md-10">
                        @Html.EditorFor(model => model.DIM_FIELD_FEATURE, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DIM_FIELD_FEATURE, "", new { @class = "text-danger" })
                    </div>*@

                @*@Html.DropDownList("DIM_FIELD_FEATURE", (MultiSelectList)ViewBag.AllFeatures, new { multiple = "multiple" })*@
                @*@Html.ListBox("DIM_FIELD_FEATURE", (MultiSelectList)ViewBag.AllFeatures, new { size = 10 })*@
                @Html.ListBoxFor(x => x.SelectedItems, (MultiSelectList)ViewBag.listFeatures, new { size = 10, width=500 })
            </div>

        @if (TempData["FeaturesInvalid"] != null)
        {
            <script>                                
                alert('This feature combination is invalid.');                
            </script>
        }

            <div class="form-group">
                @Html.LabelFor(model => model.DERIVED_CONFIGURATION, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DERIVED_CONFIGURATION, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DERIVED_CONFIGURATION, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }
